@startuml Container_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Sistema IoT de Monitoreo Agrícola - Diagrama de Contenedores

Person(farmer, "Agricultor", "Usuario que monitorea cultivos")
Person(technician, "Técnico", "Mantiene sensores")

System_Boundary(iot_system, "Sistema IoT Agrícola") {
    Container(mobile_app, "App Móvil", "React Native", "Permite monitoreo en tiempo real y configuración de alertas")
    Container(web_app, "Dashboard Web", "React.js", "Panel de control para técnicos y análisis avanzado")
    Container(api_gateway, "API Gateway", "Node.js + Express", "Punto de entrada unificado para todas las APIs")
    Container(device_service, "Servicio de Dispositivos", "Python + FastAPI", "Gestiona comunicación con sensores IoT")
    Container(data_processor, "Procesador de Datos", "Python + Celery", "Procesa y analiza datos de sensores")
    Container(notification_service, "Servicio de Notificaciones", "Node.js", "Envía alertas y notificaciones")
    ContainerDb(time_series_db, "Base de Datos de Series Temporales", "InfluxDB", "Almacena datos históricos de sensores")
    ContainerDb(operational_db, "Base de Datos Operacional", "PostgreSQL", "Configuración, usuarios, dispositivos")
    Container(message_broker, "Message Broker", "Redis/RabbitMQ", "Cola de mensajes para procesamiento asíncrono")
}

System_Ext(iot_devices, "Sensores IoT", "ESP32 con sensores ambientales")
System_Ext(weather_api, "API Meteorológica", "Servicio externo de clima")
System_Ext(email_service, "Servicio Email", "SendGrid/AWS SES")

' Relaciones con usuarios
Rel(farmer, mobile_app, "Usa", "HTTPS")
Rel(technician, web_app, "Administra", "HTTPS")

' Relaciones entre contenedores
Rel(mobile_app, api_gateway, "Hace llamadas API", "HTTPS/REST")
Rel(web_app, api_gateway, "Hace llamadas API", "HTTPS/REST")
Rel(api_gateway, device_service, "Rutea requests", "HTTP/REST")
Rel(api_gateway, notification_service, "Rutea requests", "HTTP/REST")

Rel(device_service, operational_db, "Lee/Escribe", "SQL")
Rel(device_service, time_series_db, "Escribe datos", "HTTP/InfluxQL")
Rel(device_service, message_broker, "Publica eventos", "Redis/AMQP")

Rel(data_processor, message_broker, "Consume eventos", "Redis/AMQP")
Rel(data_processor, time_series_db, "Lee/Escribe", "HTTP/InfluxQL")
Rel(data_processor, notification_service, "Triggers alertas", "HTTP/REST")

Rel(notification_service, email_service, "Envía emails", "HTTPS/API")

' Relaciones con sistemas externos
Rel(iot_devices, device_service, "Envía datos", "MQTT/HTTP")
Rel(data_processor, weather_api, "Obtiene datos", "HTTPS/REST")

@enduml